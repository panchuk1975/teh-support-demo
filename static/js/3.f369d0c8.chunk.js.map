{"version":3,"sources":["Profile/ProfileInfo/ProfileInfo.module.css","Profile/MyPosts/MyPosts.module.css","Profile/MyPosts/Post/Post.module.css","images/Red_Sea.jpg","Profile/ProfileInfo/ProfileStatusWithHooks.jsx","Profile/ProfileInfo/ProfileInfo.jsx","Profile/Profile.jsx","Profile/MyPosts/Post/Post.jsx","Profile/MyPosts/MyPosts.jsx","Profile/MyPosts/MyPostsConteiner.jsx","Profile/ProfileConteiner.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","React","memo","profile","className","s","content","src","Red_Sea","alt","descriptionBlock","photos","large","fullName","userId","lookingForAJobDescription","Preloader","Profile","this","Component","Post","item","id","message","likesCount","maxLength100","maxLengthCreator","MyPosts","AddNewPostForm","onSubmit","handleSubmit","CreateField","required","button","reduxForm","form","posts","values","addPost","newPostText","map","post","key","reverse","connect","state","postsData","ProfileContainer","match","params","history","push","getProfileCreator","getStatus","MyPostsConteiner","compose","auth","isAuth","setUserProfile","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.f369d0c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__26rU_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__37mk9\",\"item\":\"MyPosts_item__m5iyZ\",\"button\":\"MyPosts_button__3HgGl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2pVlQ\"};","module.exports = __webpack_public_path__ + \"static/media/Red_Sea.36a00c6d.jpg\";","import React, { useState, useEffect} from \"react\";\r\nimport \"./ProfileInfo.module.css\";\r\n//import s from \"./ProfileInfo.module.css\";\r\n//import Preloader from \"../../Common/Preloader/Preloader.js\";\r\n\r\nconst ProfileStatusWithHooks = props => {\r\n  //--UseState returns array from dubble elements\r\n  // let stateWithSetState = useState(false);\r\n  // let editMode = stateWithSetState[0]; // - value\r\n  // let setEditMode = stateWithSetState[1]; // - function()\r\n\r\n  //--------------\"ComponentDidMount\"---------------------//\r\n  \r\n  //----destruction assaiment\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  //---------------\"ComponentDidUpdate\"-------------------//\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);//-зависимость от props.status !!!\r\n\r\n  const onStatusChange = e => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  //------------------------------------------------------//\r\n\r\n  const activateMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deActivateMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && ( //- if false show span\r\n        <div>\r\n          <span onDoubleClick={activateMode}>{props.status || \"------\"}</span>\r\n        </div>\r\n      )}\r\n      {editMode && ( // - if true show input\r\n        <div>\r\n          <input\r\n            // ref = {this.statusImput} VALUE IS STATIC!!!!!!\r\n            onChange={onStatusChange}\r\n            autoFocus={true} // - cursor inti focus\r\n            onBlur={deActivateMode} //defocus !!!\r\n            value={status}\r\n          />\r\n          {/* value={this.props.status} /> */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport \"./ProfileInfo.module.css\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../Common/Preloader/Preloader.js\";\r\nimport Red_Sea from \"../../images/Red_Sea.jpg\";\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks.jsx';\r\n\r\n\r\nconst ProfileInfo = React.memo(({\r\n  profile,\r\n  updateStatus,\r\n  status\r\n}) => {\r\n  \r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n  return (\r\n    <div className={s.content}>\r\n      <div>\r\n        <img src={Red_Sea} alt = 'fon'/>\r\n      </div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large} alt=\"Avatar\" />\r\n        <div>\r\n          <ProfileStatusWithHooks status = {status} \r\n          updateStatus = {updateStatus}/>\r\n          <div>\r\n            <div>Повне ім'я: {profile.fullName}</div>\r\n          </div>\r\n          <div>\r\n            <div>Реєстраційний номер: {profile.userId}</div>\r\n          </div>\r\n          <div>\r\n            <div>Чим займаюсь: {profile.lookingForAJobDescription}</div>\r\n          </div>\r\n          <div>\r\n          </div>\r\n          <div />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ProfileInfo;\r\n","import React, {Component} from \"react\";\r\nimport \"./Profile.module.css\";\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo.jsx\";\r\n\r\n\r\nclass Profile extends Component {\r\n  \r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //   return false;\r\n    // }\r\n      render(){\r\n        // console.log \r\n        // ( this.props, this.state);\r\n        // console.log('Profile');\r\n  return (\r\n    <div className={s.content}>\r\n      <ProfileInfo  profile = {this.props.profile}\r\n      status = {this.props.status}\r\n      updateStatus = {this.props.updateStatus}/>\r\n    </div>\r\n  );\r\n};\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport \"./Post.module.css\";\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img alt = 'avatar' src=\"https://www.meme-arsenal.com/memes/6e04ae9a90c6874a681e2c5d8cb5d046.jpg\"></img>\r\n      <div className={s.item}>\r\n        {props.id} {'.'} {props.message}\r\n        <div>\r\n          <span>Like</span> {props.likesCount}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport \"./MyPosts.module.css\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {required, maxLengthCreator} from '../../utils/validators/validators.js';\r\nimport {Element} from '../../Common/FormsControls/Forms.js';\r\nimport {CreateField} from '../../Common/FormsControls/Forms';\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\n//const Textarea = Element(\"textarea\");\r\n\r\nconst MyPosts = React.memo(props => {\r\n  //let newPostElement = React.createRef(); // ссылка на textarea\r\n\r\n  // let onChangeNewPost = () => {\r\n  //   //-change inner text and send to state\r\n  //   let innerText = newPostElement.current.value;\r\n  //   props.updateNewPostText(innerText);\r\n  //   // props.dispatch({type: 'UPDATE-NEW-POST-TEXT', newText: innerText});\r\n  // };\r\n\r\n  let onAddPost = (values) => {\r\n    //let text = newPostElement.current.value;// - через current\r\n    props.addPost(values.newPostText); //-not needed text, get in state.newPostText\r\n    //props.dispatch({type: 'ADD-POST'});\r\n    // newPostElement.current.value = null; // - not good method\r\n    // props.updateNewPostText(''); // - remove all good mmethod,\r\n    //but better in state\r\n  };\r\n\r\n  let AddNewPostForm = props => {\r\n  //placeholder, name, component, maxLength, type, text, props\r\n    return (\r\n      <form onSubmit={props.handleSubmit}>\r\n        {CreateField(\"Post message\", \"newPostText\", \"textarea\", [required, maxLength100], \"textarea\")}\r\n        {/* <Field  name = \"newPostText\" component = {Textarea}\r\n          validate={[required, maxLength100]}\r\n          placeholder = {\"Post message.\"}\r\n          type=\"textarea\" /> */}\r\n\r\n          {/* <Field name = \"newPostText\" component = \"textarea\"\r\n          validate={[required, maxLength10]}/> */}\r\n          {/* <textarea\r\n            onChange={onChangeNewPost}\r\n            ref={newPostElement}\r\n            className={s.item}\r\n            value={props.newPostText}\r\n          /> */}\r\n        <div>\r\n          <button className={s.button}>\r\n            Enter\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  AddNewPostForm = reduxForm({form: \"ProfileAddNewPostForm\"})\r\n  (AddNewPostForm);\r\n\r\n\r\n  return (\r\n    <div className={s.posts}>\r\n      <AddNewPostForm onSubmit = {onAddPost}/>\r\n      <div>\r\n        <h2>My Posts</h2>\r\n        <div>\r\n          {[...props.posts].map(post => (\r\n            <Post\r\n              id={post.id}\r\n              message={post.message}\r\n              likesCount={post.likesCount}\r\n              key={post.id}\r\n            />\r\n          )).reverse()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n});\r\n\r\nexport default MyPosts;\r\n","//import React from \"react\";\r\nimport \"./MyPosts.module.css\";\r\nimport MyPosts from \"./MyPosts\";\r\n//import StoreContext from \"../../StoreContext\";\r\nimport { connect } from \"react-redux\";\r\nimport { addPost, \r\n // updateNewPostText, addPostActionCreator\r\n } from \"../../Redux/profileReducer\";\r\n// import { compose } from \"redux\";\r\n// import { withRouter } from \"react-router-dom\";\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    posts: state.profile.postsData,\r\n    //newPostText: state.profile.newPostText\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//   addPost: (newPostText) => {\r\n//     dispatch(addPostActionCreator(newPostText));\r\n//   }\r\n// }\r\n// }\r\n\r\nexport default \r\n  connect(mapStateToProps,\r\n    //mapDispatchToProps \r\n    { addPost, \r\n     // updateNewPostText \r\n    }\r\n    )\r\n  (MyPosts);\r\n","import React from \"react\";\r\nimport Profile from \"./Profile.jsx\";\r\nimport {\r\n  setUserProfile,\r\n  getProfileCreator,\r\n  getStatus,\r\n  updateStatus\r\n} from \"../Redux/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport withAuthRedirect from \"../Hoc/withAuthRedirect.js\";\r\nimport { compose } from \"redux\";\r\nimport MyPostsConteiner from \"./MyPosts/MyPostsConteiner\";\r\n\r\n// - class component has a methods for possibility make request\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n     let userId = this.props.match.params.userId;\r\n     if (!userId) {\r\n    userId = this.props.userId;}\r\n    if (!userId) {\r\n      userId = this.props.history.push('/login');\r\n      //-faster to login !!!\r\n    }\r\n    this.props.getProfileCreator(userId);\r\n    this.props.getStatus(userId); // - ajax for status\r\n    // usersAPI.getProfile(userId).then(response => {\r\n    //   // - preloading disactive\r\n    //   this.props.setUserProfile(response);\r\n    // });\r\n  }\r\n\r\n  // shouldComponentUpdate(nextProps, nextState){\r\n  //   return nextProps !== this.props || nextState !== this.state;\r\n  // }\r\n\r\n  render() {\r\n    //console.log('ProfileConteiner');\r\n    // let AuthRedirectComponent = withAuthRedirect (WithUrlDataConteinerComponent);\r\n    // - for class component all use THIS\r\n    //if (!this.props.isAuth) return <Redirect to={\"/login/\"} />;\r\n    // if (this.props.isAuth === false) return <Redirect to={\"/login/\"} />;\r\n    // - if not LOGIN function REDIRECT to LOGIN\r\n    // - add property is auth to \"mapStateToProps\"ProfileConteiner !!!\r\n\r\n    return (\r\n      <div>\r\n        <Profile\r\n          {...this.props}\r\n          profile={this.props.profile}\r\n          status={this.props.status}\r\n          updateStatus={this.props.updateStatus}\r\n        />\r\n        <MyPostsConteiner />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n  profile: state.profile.profile,\r\n  status: state.profile.status,\r\n  userId: state.auth.id, // - status to props\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n// - обертывание третьей сонтейнерной комронеттой\r\n//закидывающей данные из URL - withRouter\r\n//let WithUrlDataConteinerComponent = withRouter(AuthRedirectComponent);\r\n\r\n// export default connect(mapStateToProps,\r\n//   { setUserProfile, getProfileCreator })\r\n//   (WithUrlDataConteinerComponent);\r\n\r\n//---------------Function COMPOSE from REDUX---------------------//\r\n\r\n//-ProfileConteiner to => withAuthRedirect => withRouter =>\r\n//connect (...) => default =>\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    setUserProfile,\r\n    getProfileCreator,\r\n    getStatus,\r\n    updateStatus\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect \r\n)(ProfileContainer);\r\n"],"sourceRoot":""}