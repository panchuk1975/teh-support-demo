{"version":3,"sources":["Dialogs/Dialogs.module.css","Dialogs/Message/Message.module.css","Dialogs/Dialog/Dialog.module.css","Dialogs/Message/Message.jsx","Dialogs/Dialog/Dialog.jsx","Dialogs/AddMassageForm.jsx","Dialogs/Dialogs.jsx","Dialogs/DialogsConteiner.jsx"],"names":["module","exports","Message","props","className","s","message_items","id","message","DialogItem","path","linkBox","to","activeClassName","active","name","maxLength100","maxLengthCreator","Textarea","Element","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","required","type","button","Dialogs","messages","dialogs","dialog_Block","message_Block","values","addMessage","newMessageElement","compose","connect","state","newMessageText","dialogsData","map","dialog","Dialog","key","messagesData","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,cAAgB,iC,oBCAlHD,EAAOC,QAAU,CAAC,cAAgB,iC,oBCAlCD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,0B,8ECM7CC,EAJC,SAAAC,GAChB,OAAO,yBAAKC,UAAWC,IAAEC,eAAgBH,EAAMI,GAAI,MAClDJ,EAAMK,U,0BCWQC,EAZI,SAAAN,GAEjB,IAAIO,EAAO,YAAcP,EAAMI,GAC/B,OACE,yBAAKH,UAAWC,IAAEM,SAChB,kBAAC,IAAD,CAASC,GAAIF,EAAMG,gBAAiBR,IAAES,QACnCX,EAAMY,Q,mDCHXC,EAAeC,YAAiB,KAE9BC,EAAWC,YAAQ,YA4BZC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAxBZ,SAAAlB,GACrB,OAKE,0BAAMoB,SAAUpB,EAAMqB,cAEpB,kBAACC,EAAA,EAAD,CAAOC,UAAaR,EAAUH,KAAQ,oBACtCY,YAAe,qBACfC,SAAU,CAACC,IAAUb,GACrBc,KAAK,aAGP,6BACA,4BAAS1B,UAAWC,IAAE0B,QAAtB,aCuBWC,EAvCC,SAAA7B,GAId,IAAI8B,EAAW9B,EAAM8B,SAEjBC,EAAU/B,EAAM+B,QAsBpB,OACE,yBAAK9B,UAAWC,IAAE6B,SAChB,yBAAK9B,UAAWC,IAAE8B,cAAeD,GACjC,yBAAK9B,UAAWC,IAAE+B,eACfH,EACH,kBAACb,EAAD,CAAqBG,SAbL,SAACc,GACnBlC,EAAMmC,WAAWD,EAAOE,yB,gCC8DbC,sBACbC,aAnCoB,SAAAC,GACpB,MAAO,CAELC,eAAgBD,EAAMT,SAASU,eAE/BT,QAASQ,EAAMT,SAASW,YAAYC,KAAI,SAAAC,GAAM,OAC5C,kBAACC,EAAD,CAAYxC,GAAIuC,EAAOvC,GAAIQ,KAAM+B,EAAO/B,KAAMiC,IAAKF,EAAOvC,QAG5D0B,SAAUS,EAAMT,SAASgB,aAAaJ,KAAI,SAAArC,GAAO,OAC/C,kBAAC,EAAD,CAASD,GAAIC,EAAQD,GAAIC,QAASA,EAAQA,QAASwC,IAAKxC,EAAQD,WAyB3C,CAAC+B,iBAC1BY,IAFaV,CAGbR","file":"static/js/4.28106ee7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3ObVc\",\"dialog_Block\":\"Dialogs_dialog_Block__2n6Kh\",\"message_Block\":\"Dialogs_message_Block__3cVAj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message_items\":\"Message_message_items__17OEn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Dialog_active__wpaTR\",\"linkBox\":\"Dialog_linkBox__2feSu\"};","import React from \"react\";\r\nimport s from \"./Message.module.css\";\r\n\r\nconst Message = props => {\r\nreturn <div className={s.message_items}>{props.id}{\".  \"}\r\n{props.message}</div>;\r\n}\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./Dialog.module.css\";\r\n\r\nconst DialogItem = props => {\r\n  \r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.linkBox}>\r\n      <NavLink to={path} activeClassName={s.active}>\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {required, maxLengthCreator} from '../utils/validators/validators';\r\nimport {Element} from '../Common/FormsControls/Forms.js';\r\n//import {CreateField} from '../Common/FormsControls/Forms';\r\n\r\nlet maxLength100 = maxLengthCreator(100);\r\n\r\nconst Textarea = Element(\"textarea\");\r\n\r\n//--------Funktional componnent для оборачивания-----------//\r\n// - create {formData} and send to parent component AddMassageFormRedux\r\nconst AddMessageForm = props => { \r\n  return ( \r\n    // - form собирает данные и отправляет {formData} в hendleSubmit !!!\r\n    // 1) make e.preventDefault, 2)get all formData and \r\n    // put them to the object {formData}, 3)call props.onSubmit(formData)\r\n    //placeholder, name, component, validators, type, text = \"\", props = {}\r\n    <form onSubmit={props.handleSubmit}>\r\n       {/* {CreateField(\"New message\", \"newMessageElement\", \"textarea\",  [required, maxLength100], \"textarea\", '', null)} */}\r\n      <Field component = {Textarea} name = {'newMessageElement'}\r\n      placeholder = {'Enter your message'}\r\n      validate={[required, maxLength100]}\r\n      type=\"textarea\" />\r\n    {/* <textarea onChange = {onChangeNewMessage}\r\n    ref={newMessageElement} value = {newMessageText}/> */}\r\n    <div>\r\n    <button  className={s.button}>Send</button>\r\n    </div>\r\n  </form>\r\n  )\r\n};\r\n\r\n//-------------Spesial Redux conteiner component-------------//\r\n// --------Get {formatData} from AddMessageForm -----------//\r\n\r\nexport const AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})\r\n(AddMessageForm);\r\n\r\nexport default AddMessageFormRedux;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\n// import {Field, reduxForm} from \"redux-form\";\r\n// import {required, maxLengthCreator} from '../utils/validators/validators';\r\n// import {Element} from '../Common/FormsControls/Forms.js';\r\nimport {AddMessageFormRedux} from './AddMassageForm.jsx';\r\n//import { Redirect } from \"react-router-dom\";\r\n//import Message from \"./Message/Message.jsx\";\r\n//import DialogItem from \"./Dialog/Dialog.jsx\";\r\n\r\n//let maxLength100 = maxLengthCreator(100);\r\n\r\nconst Dialogs = props => {\r\n\r\n  //let newMessageElement = React.createRef(); // ссылка на textarea\r\n  \r\n  let messages = props.messages;\r\n\r\n  let dialogs = props.dialogs;\r\n \r\n  //let addMessage = () => {\r\n  //let text = newMessageElement.current.value; // - через current\r\n  // props.addMessage(/*Text */)//-not needed text, get in state.newMessageText\r\n // props.addMessage();\r\n // };\r\n\r\n  // let onChangeNewMessage = () => {//-change inner text and send to state\r\n  //   let innerText = newMessageElement.current.value;\r\n  //   // props.updateNewMessageText(innerText);\r\n  //   props.onChangeNewMessage(innerText);\r\n  // };\r\n\r\n  let addNewMessage = (values) => {\r\n    props.addMessage(values.newMessageElement);\r\n  };\r\n\r\n  //if(!props.isAuth) return <Redirect to = {'/login/'}/>;\r\n  // - if not LOGIN function REDIRECT to LOGIN\r\n  // - add property is auth to \"mapStateToProps\" in Dialogs Conteiner\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialog_Block}>{dialogs}</div>\r\n      <div className={s.message_Block}>\r\n        {messages}\r\n      <AddMessageFormRedux onSubmit = {addNewMessage}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport Message from \"./Message/Message.jsx\";\r\nimport DialogItem from \"./Dialog/Dialog.jsx\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport withAuthRedirect from \"../Hoc/withAuthRedirect.js\";\r\n//import StoreContext from \"../StoreContext\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n // onChangeNewMessage, \r\n  addMessage} from '../Redux/dialogsReducer.jsx';\r\n\r\n// const DialogsConteiner = props => {\r\n//   return (\r\n//     <StoreContext.Consumer>\r\n//       {\r\n//       (store) => {\r\n//          let messages = state.messages.messagesData.map\r\n//          (message => ( <Message id={message.id}\r\n//          message={message.message} />));\r\n\r\n//         let dialogs = state.getState().messages.dialogsData.map\r\n//         (dialog => (<DialogItem id={dialog.id} name={dialog.name}/> ));\r\n\r\n//          let addMessage = () => {\r\n//           //let text = newMessageElement.current.value; // - через current\r\n//           // props.addMessage(/*Text */)//-not needed text, get in state.newMessageText\r\n//           store.dispatch({type: 'ADD-MESSAGE'});\r\n//           };\r\n\r\n//           let onChangeNewMessage = (innerText) => {//-change inner text and send to state\r\n//             store.dispatch({type:'UPDATE-NEW-MESSAGE-TEXT', newText: innerText});\r\n//           }\r\n\r\n//          return (<Dialogs messages = {messages}\r\n//          dialogs = {dialogs} addMessage = {addMessage}\r\n//       onChangeNewMessage = {onChangeNewMessage}/>\r\n//       )\r\n//     }\r\n//   }\r\n//   </StoreContext.Consumer>\r\n//   )\r\n// }\r\n\r\n// let messages = state.messages.messagesData.map\r\n// (message => ( <Message id={message.id}\r\n// message={message.message} />));\r\n\r\n// let dialogs = state.messages.dialogsData.map\r\n// (dialog => (<DialogItem id={dialog.id} name={dialog.name}/> ));\r\n\r\n// let addMessage = () => {\r\n//let text = newMessageElement.current.value; // - через current\r\n// props.addMessage(/*Text */)//-not needed text, get in state.newMessageText\r\n//  dispatch({type: 'ADD-MESSAGE'});\r\n//  };\r\n\r\n//  let onChangeNewMessage = (innerText) => {//-change inner text and send to state\r\n//    dispatch({type:'UPDATE-NEW-MESSAGE-TEXT', newText: innerText});\r\n//  }\r\n\r\nlet mapStateToProps = state => {\r\n  return {\r\n    // - let take from state\r\n    newMessageText: state.messages.newMessageText,\r\n    //isAuth: state.auth.isAuth,//- took to DialogsComponent like props !\r\n    dialogs: state.messages.dialogsData.map(dialog => (\r\n      <DialogItem id={dialog.id} name={dialog.name} key={dialog.id} />\r\n    )),\r\n\r\n    messages: state.messages.messagesData.map(message => (\r\n      <Message id={message.id} message={message.message} key={message.id} />\r\n    ))\r\n  };\r\n};\r\n\r\n// let mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     //onChangeNewMessage: innerText =>\r\n//      // dispatch({ type: \"UPDATE-NEW-MESSAGE-TEXT\", newText: innerText }),\r\n//     addMessage: (newMessageText) => dispatch({ type: \"ADD-MESSAGE\", newMessageText })\r\n//   };\r\n// };\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// const SuperDialogsContainer = connect(\r\n//   mapStateToProps,\r\n//   mapDispatchToProps\r\n// )(AuthRedirectComponent);\r\n\r\n//---------------Function COMPOSE from REDUX---------------------//\r\n\r\n//----Dialogs to => withAuthRedirect => connect (...) => default =>\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {addMessage}),\r\n  withAuthRedirect\r\n)(Dialogs); // - from bottom to top;\r\n"],"sourceRoot":""}